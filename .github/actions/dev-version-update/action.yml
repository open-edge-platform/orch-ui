# SPDX-FileCopyrightText: (C) 2025 Intel Corporation
# SPDX-License-Identifier: Apache-2.0
---
name: Increment to Next -dev Version
description: Updates VERSION files to next dev version after a release

inputs:
  exclude_paths:
    description: "Comma-separated list of path patterns to exclude from search"
    required: false
    default: "*/node_modules/*,*/dist/*,*/build/*,*/vendor/*,*/bin/*,*/pkg/*,*/.git/*"
  gh_token:
    required: true
    description: "GitHub token for creating pull request"

runs:
  using: "composite"
  steps:
    - name: Set up Git identity
      shell: bash
      run: |
        git config --global user.name "Github Bot"
        git config --global user.email "github-bot@intel.com"

    - name: Find and update VERSION files
      id: update_versions
      shell: bash
      run: |
        source ${{ github.action_path }}/tagging-lib.sh

        CURRENT_DATE=$(date +%d-%m-%Y-%H%M%S)
        BRANCH_NAME="update-versions-${CURRENT_DATE}"
        git checkout -b $BRANCH_NAME

        CHANGES_MADE=0

        IFS=',' read -ra EXCLUDE_PATHS <<< "${{ inputs.exclude_paths }}"
        FIND_CMD="find . -name VERSION -type f"

        for EXCLUDE in "${EXCLUDE_PATHS[@]}"; do
          FIND_CMD="$FIND_CMD -not -path \"$EXCLUDE\""
        done

        echo "Executing: $FIND_CMD"

        for VERSION_PATH in $(eval $FIND_CMD 2>/dev/null || echo ""); do
          echo "Processing $VERSION_PATH"
          export VERSIONFILE="$VERSION_PATH"

          RELEASE_VERSION=0
          read_version
          check_if_releaseversion

          if [ $RELEASE_VERSION -eq 1 ]; then
            NEXT_VERSION=$(get_next_version "$NEW_VERSION" "-dev")
            echo "Updating $VERSION_PATH from $NEW_VERSION to $NEXT_VERSION"

            # Check if .update-version.sh exists in the same directory and execute it
            VERSION_DIR=$(dirname "$VERSION_PATH")
            UPDATE_SCRIPT="$VERSION_DIR/.update-version.sh"

            echo "DEBUG: VERSION_DIR = $VERSION_DIR"
            echo "DEBUG: UPDATE_SCRIPT = $UPDATE_SCRIPT"

            if [ -f "$UPDATE_SCRIPT" ]; then
              echo "Found .update-version.sh in $VERSION_DIR, executing..."
              chmod +x "$UPDATE_SCRIPT"
              "$UPDATE_SCRIPT" "$NEXT_VERSION"
            fi

            echo "$NEXT_VERSION" > "$VERSION_PATH"
            git add -A
            CHANGES_MADE=1
          fi
        done

        if [ $CHANGES_MADE -eq 1 ]; then
          git commit -m "Update VERSION files to next dev version"

          echo "------------------------------------------------------"
          echo "Updated files:"
          git diff --name-only HEAD~1 HEAD | while read file; do
            echo "- $file"
          done
          echo "------------------------------------------------------"

          git push origin $BRANCH_NAME

          echo "branch_name=$BRANCH_NAME" >> $GITHUB_OUTPUT
          echo "changes_made=true" >> $GITHUB_OUTPUT
        else
          echo "No VERSION files found to update"
          echo "changes_made=false" >> $GITHUB_OUTPUT
        fi

    - name: Create Pull Request
      if: steps.update_versions.outputs.changes_made == 'true'
      shell: bash
      env:
        GH_TOKEN: ${{ inputs.gh_token }}
      run: |
        gh pr create \
          --title "Version bump to -dev" \
          --body "Automatically bumping the version to the next development iteration (-dev suffix)." \
          --base main \
          --head ${{ steps.update_versions.outputs.branch_name }}
